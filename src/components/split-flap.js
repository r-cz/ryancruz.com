/**
 * HotFX Split Flap Component
 * Original: @hot-page/hotfx-split-flap@0.0.1
 * Locally hosted for performance
 */
export class HotFXSplitFlap extends HTMLElement{#t=!1;#e=!1;#i;#r;#n;#s;static get observedAttributes(){return["width","height","duration","characters"]}constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){["width","height","duration"].forEach((t=>{if(!this.hasAttribute(t))return;const e=parseInt(this.getAttribute(t));(isNaN(e)||e<=0)&&this.#a(t)})),this.#t=!1,this.#h(),this.#i=new IntersectionObserver((t=>{this.#e=t[0].isIntersecting,this.#e&&!this.#t&&this.#o()}),{threshold:.5}),this.#i.observe(this),this.#r=new MutationObserver((async()=>{this.#d(),await Promise.all(Array.from(this.shadowRoot.querySelectorAll(".char")).map((t=>t.getAnimations())).flat().map((t=>t.finish()))),this.#e&&this.#o()})),this.#r.observe(this,{childList:!0,characterData:!0,subtree:!0})}disconnectedCallback(){this.#i?.disconnect(),this.#i=void 0,this.#r?.disconnect(),this.#r=void 0}attributeChangedCallback(t,e,i){if(["width","height","duration"].includes(t)){const e=parseInt(this.getAttribute(t));if(isNaN(e)||e<=0)return this.#a(t)}"duration"!=t&&e!=i&&(this.#h(),this.#e&&this.#o())}get width(){if(this.#n)return this.#n[0].length;if(this.hasAttribute("width")){const t=parseInt(this.getAttribute("width"));if(Number.isInteger(t)&&t>0)return t}return Math.max(...this.textContent.split("\n").map((t=>t.length)))}set width(t){(!Number.isInteger(t)||t<=0)&&this.#a("width"),this.setAttribute("width",t),this.#h(),this.#e&&this.#o()}get height(){if(this.#n)return this.#n.length;if(this.hasAttribute("height")){const t=parseInt(this.getAttribute("height"));if(Number.isInteger(t)&&t>0)return t}return this.textContent.split("\n").length}set height(t){(!Number.isInteger(t)||t<=0)&&this.#a("height"),this.setAttribute("height",t),this.#h(),this.#e&&this.#o()}get duration(){let t=150;if(this.hasAttribute("duration")){const e=parseInt(this.getAttribute("duration"));Number.isInteger(e)&&e>0&&(t=e)}return t}set duration(t){if("number"!=typeof t||t<=0)return this.#a("duration");this.setAttribute("duration",t)}get characters(){return this.getAttribute("characters")||" ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!.,:?\"'/$"}set characters(t){this.setAttribute("characters",t)}#d(){const t=this.textContent.split("\n");this.#s=Array.from({length:this.height}).map(((e,i)=>{const r=t[i]||"";return Array.from({length:this.width}).map(((t,e)=>r[e]?.toUpperCase()||" "))}))}#h(){this.#n=null,this.#n=Array.from({length:this.height},(()=>Array.from({length:this.width},(()=>" ")))),this.#d(),this.shadowRoot.innerHTML=[`\n      <style>\n        :host {\n          display: inline-block;\n          font-family: Arial, sans-serif;\n        }\n\n        #container {\n          display: grid;\n          grid-template-columns: repeat(${this.width}, auto);\n          grid-template-rows: repeat(${this.height}, auto);\n          gap: var(--hotfx-split-flap-grid-gap, .1em);\n          perspective: 1000px;\n        }`,".char {\n          position: relative;\n          width: 1em;\n          height: 1.2em;\n          transform-style: preserve-3d;\n        }",".top, .bottom, .top-next, .bottom-next {\n          position: absolute;\n          inset: 0;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          overflow: hidden;\n          color: white;\n          background: black;","backface-visibility: hidden;\n        }",".top, .top-next {\n          clip-path: polygon(0 0, 100% 0, 100% 50%, 0 50%);\n        }\n\n        .bottom, .bottom-next {\n          clip-path: polygon(0 50%, 100% 50%, 100% 100%, 0 100%);\n        }",'.divider {\n          position: absolute;\n          top: 50%;\n          left: 0;\n          right: 0;\n          height: 1px;\n          background-color: currentColor;\n          color: #999;\n          z-index: 10;\n          transform: translateY(-50%);\n        }\n      </style>\n      <div id="container">',this.#n.map(((t,e)=>(e+=1,t.map(((t,i)=>{const r=" "===t?"&nbsp;":t;return`\n              <span\n                class=char\n                part="char char-${i+=1} char-${e}-${i}">\n                <span\n                  class=top-next\n                  part="flap flap-${i} flap-${e}-${i}"\n                  aria-hidden=true>\n                  ${r}\n                  <span\n                    class=divider\n                    part="divider flap-${i} divider-${e}-${i}">\n                  </span>\n                </span>\n                <span\n                  class=bottom-next\n                  part="flap flap-${i} flap-${e}-${i}"\n                  aria-hidden=true>\n                  ${r}\n                  <span\n                    class=divider\n                    part="divider flap-${i} divider-${e}-${i}">\n                  </span>\n                </span>\n                <span\n                  class=top\n                  part="flap flap-${i} flap-${e}-${i}">\n                  ${r}\n                  <span \n                    class=divider\n                    part="divider flap-${i} divider-${e}-${i}">\n                  </span>\n                </span>\n                <span\n                  class=bottom\n                  part="flap flap-${i} flap-${e}-${i}"\n                  aria-hidden=true>\n                  ${r}\n                  <span\n                    class=divider\n                    part="divider flap-${i} divider-${e}-${i}">\n                  </span>\n                </span>\n              </span>\n            `})).join("")))).join(""),"</div>"].join("")}#o(){this.#t=!0;const t=this.#s;this.shadowRoot.querySelectorAll(".char").forEach(((e,i)=>{const r=Math.floor(i/this.width),n=i%this.width,s=this.characters.includes(t[r][n])?this.characters.indexOf(t[r][n]):0;let a=this.characters.indexOf(this.#n[r][n]);if(a==s)return;const h=async()=>{if(t!=this.#s)return;const i=a<this.characters.length-1?a+1:0,o=this.characters[i];e.querySelector(".top-next").childNodes[0].textContent=o,e.querySelector(".bottom-next").childNodes[0].textContent=o;const d={duration:this.duration,easing:"ease-in"};await Promise.all([e.querySelector(".top").animate([{transform:"rotateX(0deg)"},{transform:"rotateX(-180deg)"}],d).finished,e.querySelector(".bottom-next").animate([{transform:"rotateX(180deg)"},{transform:"rotateX(0deg)"}],d).finished]),e.querySelector(".top").childNodes[0].textContent=o,e.querySelector(".bottom").childNodes[0].textContent=o,a=i,this.#n[r][n]=this.characters[a],a!==s&&h()};h()}))}#a(t){console.error(`<hotfx-split-flap> ${t} attribute must be a positive integer; got  "${this.getAttribute(t)}"`)}}

// Register the custom element
customElements.define("hotfx-split-flap", HotFXSplitFlap);